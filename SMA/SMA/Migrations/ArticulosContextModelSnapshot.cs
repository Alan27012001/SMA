// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMA.Modelos;
using System;

namespace SMA.Migrations
{
    [DbContext(typeof(smafacpyaContext))]
    partial class ArticulosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SMA.Models.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<short>("IdTipoArticulo")
                        .HasColumnType("smallint");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoArticulo");

                    b.ToTable("Articulo", "Catalogo");
                });

            modelBuilder.Entity("SMA.Models.Modulo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasName("UK_Modulo");

                    b.ToTable("Modulo", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.ModuloPantalla", b =>
                {
                    b.Property<short>("IdModulo")
                        .HasColumnType("smallint");

                    b.Property<short>("IdPantalla")
                        .HasColumnType("smallint");

                    b.HasKey("IdModulo", "IdPantalla")
                        .HasName("PK_Seguridad.ModuloPantalla");

                    b.HasIndex("IdPantalla");

                    b.ToTable("ModuloPantalla", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.Pantalla", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasName("UK_Pantalla");

                    b.ToTable("Pantalla", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.PantallaPermiso", b =>
                {
                    b.Property<short>("IdPantalla")
                        .HasColumnType("smallint");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("int");

                    b.HasKey("IdPantalla", "IdPermiso");

                    b.HasIndex("IdPermiso");

                    b.ToTable("PantallaPermiso", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<byte[]>("Llave")
                        .IsRequired()
                        .HasColumnType("varbinary(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Llave")
                        .IsUnique()
                        .HasName("UK_Permiso")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Permiso", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.Rol", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEliminacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreacion");

                    b.HasIndex("UsuarioEdicion");

                    b.HasIndex("UsuarioEliminacion");

                    b.ToTable("Rol", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.RolModuloPantallaPermiso", b =>
                {
                    b.Property<short>("IdRol")
                        .HasColumnType("smallint");

                    b.Property<short>("IdModulo")
                        .HasColumnType("smallint");

                    b.Property<short>("IdPantalla")
                        .HasColumnType("smallint");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("int");

                    b.HasKey("IdRol", "IdModulo", "IdPantalla", "IdPermiso");

                    b.HasIndex("IdModulo");

                    b.HasIndex("IdPantalla");

                    b.HasIndex("IdPermiso");

                    b.ToTable("RolModuloPantallaPermiso", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.TipoArticulo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TipoArticulo", "Catalogo");
                });

            modelBuilder.Entity("SMA.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<byte[]>("Contraseña")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int?>("UsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEliminacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreacion");

                    b.HasIndex("UsuarioEdicion");

                    b.HasIndex("UsuarioEliminacion");

                    b.ToTable("Usuario", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.UsuarioLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVigencia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuarioNavigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuarioNavigationId");

                    b.ToTable("UsuarioLogin");
                });

            modelBuilder.Entity("SMA.Models.UsuarioRol", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<short>("IdRol")
                        .HasColumnType("smallint");

                    b.HasKey("IdUsuario", "IdRol");

                    b.HasIndex("IdRol");

                    b.ToTable("UsuarioRol", "Seguridad");
                });

            modelBuilder.Entity("SMA.Models.Articulo", b =>
                {
                    b.HasOne("SMA.Models.TipoArticulo", "IdTipoArticuloNavigation")
                        .WithMany("Articulo")
                        .HasForeignKey("IdTipoArticulo")
                        .HasConstraintName("FK_Articulo_TipoArticulo")
                        .IsRequired();
                });

            modelBuilder.Entity("SMA.Models.ModuloPantalla", b =>
                {
                    b.HasOne("SMA.Models.Modulo", "IdModuloNavigation")
                        .WithMany("ModuloPantalla")
                        .HasForeignKey("IdModulo")
                        .HasConstraintName("FK_ModuloPantalla_Modulo")
                        .IsRequired();

                    b.HasOne("SMA.Models.Pantalla", "IdPantallaNavigation")
                        .WithMany("ModuloPantalla")
                        .HasForeignKey("IdPantalla")
                        .HasConstraintName("FK_ModuloPantalla_Pantalla")
                        .IsRequired();
                });

            modelBuilder.Entity("SMA.Models.PantallaPermiso", b =>
                {
                    b.HasOne("SMA.Models.Pantalla", "IdPantallaNavigation")
                        .WithMany("PantallaPermiso")
                        .HasForeignKey("IdPantalla")
                        .HasConstraintName("FK_PantallaPermiso_Pantalla")
                        .IsRequired();

                    b.HasOne("SMA.Models.Permiso", "IdPermisoNavigation")
                        .WithMany("PantallaPermiso")
                        .HasForeignKey("IdPermiso")
                        .HasConstraintName("FK_PantallaPermiso_Permiso")
                        .IsRequired();
                });

            modelBuilder.Entity("SMA.Models.Rol", b =>
                {
                    b.HasOne("SMA.Models.Usuario", "UsuarioCreacionNavigation")
                        .WithMany("RolUsuarioCreacionNavigation")
                        .HasForeignKey("UsuarioCreacion")
                        .HasConstraintName("FK_Rol_UsuarioCreacion");

                    b.HasOne("SMA.Models.Usuario", "UsuarioEdicionNavigation")
                        .WithMany("RolUsuarioEdicionNavigation")
                        .HasForeignKey("UsuarioEdicion")
                        .HasConstraintName("FK_Rol_UsuarioEdicion");

                    b.HasOne("SMA.Models.Usuario", "UsuarioEliminacionNavigation")
                        .WithMany("RolUsuarioEliminacionNavigation")
                        .HasForeignKey("UsuarioEliminacion")
                        .HasConstraintName("FK_Rol_UsuarioEliminacion");
                });

            modelBuilder.Entity("SMA.Models.RolModuloPantallaPermiso", b =>
                {
                    b.HasOne("SMA.Models.Modulo", "IdModuloNavigation")
                        .WithMany("RolModuloPantallaPermiso")
                        .HasForeignKey("IdModulo")
                        .HasConstraintName("FK_RolModuloPantallaPermiso_Modulo")
                        .IsRequired();

                    b.HasOne("SMA.Models.Pantalla", "IdPantallaNavigation")
                        .WithMany("RolModuloPantallaPermiso")
                        .HasForeignKey("IdPantalla")
                        .HasConstraintName("FK_RolModuloPantallaPermiso_Pantalla")
                        .IsRequired();

                    b.HasOne("SMA.Models.Permiso", "IdPermisoNavigation")
                        .WithMany("RolModuloPantallaPermiso")
                        .HasForeignKey("IdPermiso")
                        .HasConstraintName("FK_RolModuloPantallaPermiso_Permiso")
                        .IsRequired();

                    b.HasOne("SMA.Models.Rol", "IdRolNavigation")
                        .WithMany("RolModuloPantallaPermiso")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_RolModuloPantallaPermiso_Rol")
                        .IsRequired();
                });

            modelBuilder.Entity("SMA.Models.Usuario", b =>
                {
                    b.HasOne("SMA.Models.Usuario", "UsuarioCreacionNavigation")
                        .WithMany("InverseUsuarioCreacionNavigation")
                        .HasForeignKey("UsuarioCreacion")
                        .HasConstraintName("FK_Usuario_UsuarioCreacion");

                    b.HasOne("SMA.Models.Usuario", "UsuarioEdicionNavigation")
                        .WithMany("InverseUsuarioEdicionNavigation")
                        .HasForeignKey("UsuarioEdicion")
                        .HasConstraintName("FK_Usuario_UsuarioEdicion");

                    b.HasOne("SMA.Models.Usuario", "UsuarioEliminacionNavigation")
                        .WithMany("InverseUsuarioEliminacionNavigation")
                        .HasForeignKey("UsuarioEliminacion")
                        .HasConstraintName("FK_Usuario_UsuarioEliminacion");
                });

            modelBuilder.Entity("SMA.Models.UsuarioLogin", b =>
                {
                    b.HasOne("SMA.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsuarioNavigationId");
                });

            modelBuilder.Entity("SMA.Models.UsuarioRol", b =>
                {
                    b.HasOne("SMA.Models.Rol", "IdRolNavigation")
                        .WithMany("UsuarioRol")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_UsuarioRol_Rol")
                        .IsRequired();

                    b.HasOne("SMA.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("UsuarioRol")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_UsuarioRol_Usuario")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
